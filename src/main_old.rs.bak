#![allow(non_camel_case_types)]


// In pass 1: I will not add any extra bells and whistles to Lox
use core::panic;
use std::borrow::Borrow;

#[derive(Debug, Clone)]
enum Object {
    String(String),
    Number(f64),
    Boolean(bool),
    Nil,
}

impl std::fmt::Display for Object {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Object::String(s) => write!(f, "'{}'", s),
            Object::Number(n) => write!(f, "{}", n),
            Object::Boolean(b) => write!(f, "{}", b),
            Object::Nil => write!(f, "nil"),
        }
    }
}

#[derive(Debug)]
enum Expr {
    Binary(Box<Expr>, Token, Box<Expr>),
    Unary(Token, Box<Expr>),
    Literal(Object),
    Grouping(Box<Expr>),
}

impl Expr {
    fn visit<T>(&self, visitor: &mut dyn ExprVisitor<T>) -> T {
        match self {
            Expr::Binary(left, op, right) => visitor.visit_binary(left, op, right),
            Expr::Unary(op, right) => visitor.visit_unary(op, right),
            Expr::Literal(value) => visitor.visit_literal(value),
            Expr::Grouping(expr) => visitor.visit_grouping(expr),
        }
    }
}

trait ExprVisitor<T> {
    fn visit_binary(&mut self, left: &Expr, op: &Token, right: &Expr) -> T;
    fn visit_unary(&mut self, op: &Token, right: &Expr) -> T;
    fn visit_literal(&mut self, value: &Object) -> T;
    fn visit_grouping(&mut self, expr: &Expr) -> T;
}

#[derive(Debug)]
enum Stmt {
    Expression(Box<Expr>),
    Print(Box<Expr>),
}

impl Stmt {
    fn visit(&self, visitor: &mut dyn StmtVisitor) { // statements produce no values
        match self {
            Stmt::Expression(e) => visitor.visit_expression(e), // todo: does it make sense to not peel this off here?
            Stmt::Print(e) => visitor.visit_print(e)
        }
    }
}

trait StmtVisitor { // statements produce no values
    fn visit_expression(&mut self, expr: &Box<Expr>); // TODO: do I pass in boxes here?
    fn visit_print(&mut self, expr: &Box<Expr>);      //       does that make sense? what does it mean?
}

struct Parser {
    tokens: Vec<TokenLoc>,
    current: usize,
}

impl Parser {
    fn new(tokens: Vec<TokenLoc>) -> Self {
        Parser {
            tokens: tokens,
            current: 0
        }
    }

    fn expression(&mut self) -> Result<Box<Expr>, String> {
        self.equality()
    }

    fn equality(&mut self) -> Result<Box<Expr>, String> {
        let mut e = self.comparison()?;

        while self.expect_token_type_one_of(vec![Token::EQ_EQ, Token::BANG_EQ]) {
            let op = self.previous().token.clone();
            let right = self.comparison()?;
            e = Box::new(Expr::Binary(e, op, right));
        }

        return Ok(e);
    }

    fn comparison(&mut self) -> Result<Box<Expr>, String> {
        let mut e = self.term()?;

        while self.expect_token_type_one_of(vec![Token::GT, Token::GT_EQ, Token::LS, Token::LS_EQ]) {
            let op = self.previous().token.clone();
            let right = self.term()?;
            e = Box::new(Expr::Binary(e, op, right));
        }

        return Ok(e);
    }

    fn term(&mut self) -> Result<Box<Expr>, String> {
        let mut e = self.factor()?;

        while self.expect_token_type_one_of(vec![Token::MINUS, Token::PLUS]) {
            let op = self.previous().token.clone();
            let right = self.factor()?;
            e = Box::new(Expr::Binary(e, op, right));
        }

        return Ok(e)
    }

    fn factor(&mut self) -> Result<Box<Expr>, String> {
        let mut e = self.unary()?;

        while self.expect_token_type_one_of(vec![Token::SLASH, Token::STAR]) {
            let op = self.previous().token.clone();
            let right = self.unary()?;
            e = Box::new(Expr::Binary(e, op, right));
        }

        return Ok(e)
    }

    fn unary(&mut self) -> Result<Box<Expr>, String> {
        if self.expect_token_type_one_of(vec![Token::BANG, Token::MINUS]) {
            let op = self.previous().token.clone();
            let right = self.unary()?;

            return Ok(Box::new(Expr::Unary(op, right)))
        }

        return self.primary()
    }

    fn primary(&mut self) -> Result<Box<Expr>, String> {

        if self.expect_token_type_one_of(vec![Token::FALSE]) {
            return Ok(Box::new(Expr::Literal(Object::Boolean(false))))
        }

        if self.expect_token_type_one_of(vec![Token::TRUE]) {
            return Ok(Box::new(Expr::Literal(Object::Boolean(true))))
        }

        if self.expect_token_type_one_of(vec![Token::NIL]) {
            return Ok(Box::new(Expr::Literal(Object::Nil)))
        }

        if self.expect_token_type_one_of(vec![Token::LEFT_PAREN]) {
            let e = self.expression()?;
            self.consume(&Token::RIGHT_PAREN, "Expect ')' after expression.".to_string())?;
            return Ok(Box::new(Expr::Grouping(e)))
        }

        if self.expect_token_type_one_of(vec![Token::String("".to_string()), Token::Number(1337.0)]) {
            match &self.previous().token {
                Token::String(s) => return Ok(Box::new(Expr::Literal(Object::String(s.clone())))),
                Token::Number(n) => return Ok(Box::new(Expr::Literal(Object::Number(*n)))),
                _ => { panic!("invariant failure") }
            }
        }

        println!("peek: {:?}", self.peek());
        println!("returning an empty nill");

        return Ok(Box::new(Expr::Literal(Object::Nil))) // TODO: is this an error?
    }

    fn consume(&mut self, token_type: &Token, msg: String) -> Result<&TokenLoc, String> {
        if self.check(token_type) {
            Ok(self.advance())
        } else {
            Err(msg)
        }
       
    }

    fn expect_token_type_one_of(&mut self, types: Vec<Token>) -> bool {
        for t in types {
            if self.check(&t) {
                self.advance();
                return true;
            }
        }

        return false;
    }

    fn check(&self, token: &Token) -> bool { // compare tagged enum's discriminants to compare type but not contained value
        // println!("check: {} against {}: {:?} - {:?}: {}", 
        //     &self.peek().token, &token, std::mem::discriminant(token), std::mem::discriminant(&self.peek().token), 
        //     std::mem::discriminant(token) == std::mem::discriminant(&self.peek().token));

        std::mem::discriminant(token) == std::mem::discriminant(&self.peek().token) 
    }

    fn advance(&mut self) -> &TokenLoc {
        if !self.is_at_end() {
            self.current += 1;
        }

        return self.previous()
    }

    fn is_at_end(&self) -> bool {
        return self.peek().token == Token::EOF;
    }

    fn peek(&self) -> &TokenLoc {
        return self.tokens.get(self.current).unwrap();
    }

    fn previous(&self) -> &TokenLoc {
        return self.tokens.get(self.current - 1).unwrap();
    }

    fn statement(&mut self) -> Result<Stmt, String> {
        println!("parsing statement, peek() is: {:?}", self.peek());
        if self.expect_token_type_one_of(vec![Token::PRINT]) {
            self.print_statement()
        } else {
            self.expression_statement()
        }
    }

    fn print_statement(&mut self) -> Result<Stmt, String> {
        let value = self.expression()?;
        self.consume(&Token::SEMICOLON, format!("Expect ';'after value."))?;

        return Ok(Stmt::Print(value))
    }
    
    fn expression_statement(&mut self) -> Result<Stmt, String> {
        let expr = self.expression()?;
        self.consume(&Token::SEMICOLON, format!("Expect ';' after expression"))?;

        return Ok(Stmt::Expression(expr))
    }

    fn parse(&mut self) -> Result<Vec<Stmt>, String> {
        // self.expression() // - hack to get it running
        let mut statements = vec![];

        while !self.is_at_end() {
            statements.push(self.statement()?);
        }

        return Ok(statements)
    }


}

struct AstPrinter;

impl ExprVisitor<String> for AstPrinter {
    fn visit_binary(&mut self, left: &Expr, op: &Token, right: &Expr) -> String {
        return self.parenthesize(format!("{}", op), &[left, right]);
    }

    fn visit_unary(&mut self, op: &Token, right: &Expr) -> String {
            return self.parenthesize(format!("{}", op), &[right])
    }

    fn visit_grouping(&mut self, expr: &Expr) -> String {
        return self.parenthesize("group".to_string(), &[expr]);
    }

    fn visit_literal(&mut self, value: &Object) -> String {
        return value.to_string();
    }
}

impl StmtVisitor for AstPrinter {
    fn visit_expression(&mut self, expr: &Box<Expr>) {
        expr.visit(self);
    }

    fn visit_print(&mut self, expr: &Box<Expr>) {
        expr.visit(self);
    }
}

impl AstPrinter {
    fn parenthesize(&mut self, name: String, exprs: &[&Expr]) -> String {
        let mut s = String::new();
        s.push('(');
        s.push_str(&name);

        for expr in exprs {
            s.push(' ' );
            s.push_str(&expr.visit(self));
        }

        s.push(')');

        return s;
    }

    fn print(&mut self, stmts: &Vec<Stmt>) {
        for s in stmts {
            println!("{:?}", &s);
            s.visit(self)
        }
    }
}

struct Interpreter {

}

impl Interpreter {
    fn evaluate(&mut self, expr: &Expr) -> Result<Object, String> {
        return expr.visit(self);
    }

    fn is_truthy(&mut self, obj: &Object) -> bool {
        match obj {
            Object::Nil => false,
            Object::Boolean(b) => *b,
            _ => true,
        }
    }

    fn interpret(&mut self, stmts: Vec<Stmt>) {
        for stmt in stmts {
            self.execute(stmt); // todo: catching runtime errors?
        }
    }

    fn execute(&mut self, stmt: Stmt) {
        stmt.visit(self)
    }
}


impl ExprVisitor<Result<Object, String>> for Interpreter {
    fn visit_binary(&mut self, left: &Expr, op: &Token, right: &Expr) -> Result<Object, String> {
        let left = self.evaluate(left)?;
        let right = self.evaluate(right)?;

        match (op, &left, &right) {
            // Number
            (Token::MINUS, Object::Number(l), Object::Number(r)) => Ok(Object::Number(l - r)),
            (Token::PLUS, Object::Number(l), Object::Number(r)) => Ok(Object::Number(l + r)),
            (Token::SLASH, Object::Number(l), Object::Number(r)) => Ok(Object::Number(l / r)),
            (Token::STAR, Object::Number(l), Object::Number(r)) => Ok(Object::Number(l * r)),
            (Token::GT, Object::Number(l), Object::Number(r)) => Ok(Object::Boolean(l > r)),
            (Token::LS, Object::Number(l), Object::Number(r)) => Ok(Object::Boolean(l > r)),
            (Token::EQ, Object::Number(l), Object::Number(r)) => Ok(Object::Boolean(l == r)),
            (Token::GT_EQ, Object::Number(l), Object::Number(r)) => Ok(Object::Boolean(l >= r)),
            (Token::LS_EQ, Object::Number(l), Object::Number(r)) => Ok(Object::Boolean(l <= r)),
            (Token::BANG_EQ, Object::Number(l), Object::Number(r)) => Ok(Object::Boolean(l != r)),

            // String
            (Token::PLUS, Object::String(l), Object::String(r)) => Ok(Object::String(format!("{}{}", l, r))),

            // BOOLE
            (Token::BANG_EQ, Object::Boolean(l), Object::Boolean(r)) => Ok(Object::Boolean(l != r)),
            (Token::EQ_EQ, Object::Boolean(l), Object::Boolean(r)) => Ok(Object::Boolean(l == r)),

            // hilfe
            (Token::EQ_EQ, _, Object::Number(_)) => Ok(Object::Boolean(false)),
            (Token::EQ_EQ, Object::Number(_), _) => Ok(Object::Boolean(false)),
            (Token::EQ_EQ, _, Object::String(_)) => Ok(Object::Boolean(false)),
            (Token::EQ_EQ, Object::String(_), _) => Ok(Object::Boolean(false)),
            (c, f, k) => { Err(format!("bad binary operation: {} {} {}", f, c, k)) },
        }
    }

    fn visit_unary(&mut self, op: &Token, right: &Expr) -> Result<Object, String> {
        let right = self.evaluate(right)?;

        match op {
            Token::MINUS => match right {
                Object::Number(d) => Ok(Object::Number(-d)),
                _ => Err(format!("unary operator {} only supports Object::Number", op))
            },
            Token::BANG => Ok(Object::Boolean(!self.is_truthy(&right))),
            _ => Err(format!("unsupported unary operator {}", op))
        }
    }

    fn visit_grouping(&mut self, expr: &Expr) -> Result<Object, String> {
        return self.evaluate(expr)
    }

    fn visit_literal(&mut self, value: &Object) -> Result<Object, String> {
        Ok(value.clone()) // todo: does this eat memory?
    }

}

impl StmtVisitor for Interpreter {
    fn visit_expression(&mut self, expr: &Box<Expr>) {
        self.evaluate(&expr);
    }

    fn visit_print(&mut self, expr: &Box<Expr>) {
        let value = self.evaluate(&expr);
        println!("{:?}", value)
    }
}


#[derive(Debug, PartialEq, Clone)]
enum Token {
    LEFT_PAREN, RIGHT_PAREN, LEFT_BRACE, RIGHT_BRACE,
    COMMA, DOT, MINUS, PLUS, SEMICOLON, SLASH, STAR,

    BANG, BANG_EQ, 
    EQ, EQ_EQ,
    GT, GT_EQ,
    LS, LS_EQ,

    Identifier(String),
    String(String),
    Number(f64),

    AND, CLASS, ELSE, FALSE, FUN, FOR, IF, NIL, OR,
    PRINT, RETURN, SUPER, THIS, TRUE, VAR, WHILE,

    EOF, Error(String), Comment(String)
}

impl std::fmt::Display for Token {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Token::LEFT_PAREN => write!(f, "LEFT_PAREN"),
            Token::RIGHT_PAREN => write!(f, "RIGHT_PAREN"),
            Token::LEFT_BRACE => write!(f, "LEFT_BRACE"),
            Token::RIGHT_BRACE => write!(f, "RIGHT_BRACE"),
            Token::COMMA => write!(f, "COMMA"),
            Token::DOT => write!(f, "DOT"),
            Token::MINUS => write!(f, "MINUS"),
            Token::PLUS => write!(f, "PLUS"),
            Token::SEMICOLON => write!(f, "SEMICOLON"),
            Token::SLASH => write!(f, "SLASH"),
            Token::STAR => write!(f, "STAR"),
            Token::BANG => write!(f, "BANG"),
            Token::BANG_EQ => write!(f, "BANG_EQ"),
            Token::EQ => write!(f, "EQ"),
            Token::EQ_EQ => write!(f, "EQ_EQ"),
            Token::GT => write!(f, "GT"),
            Token::GT_EQ => write!(f, "GT_EQ"),
            Token::LS => write!(f, "LS"),
            Token::LS_EQ => write!(f, "LS_EQ"),
            Token::Identifier(ref s) => write!(f, "Identifier({})", s),
            Token::String(ref s) => write!(f, "String({})", s),
            Token::Number(n) => write!(f, "Number({})", n),
            Token::AND => write!(f, "AND"),
            Token::CLASS => write!(f, "CLASS"),
            Token::ELSE => write!(f, "ELSE"),
            Token::FALSE => write!(f, "FALSE"),
            Token::FUN => write!(f, "FUN"),
            Token::FOR => write!(f, "FOR"),
            Token::IF => write!(f, "IF"),
            Token::NIL => write!(f, "NIL"),
            Token::OR => write!(f, "OR"),
            Token::PRINT => write!(f, "PRINT"),
            Token::RETURN => write!(f, "RETURN"),
            Token::SUPER => write!(f, "SUPER"),
            Token::THIS => write!(f, "THIS"),
            Token::TRUE => write!(f, "TRUE"),
            Token::VAR => write!(f, "VAR"),
            Token::WHILE => write!(f, "WHILE"),
            Token::EOF => write!(f, "EOF"),
            Token::Error(ref s) => write!(f, "Error({})", s),
            Token::Comment(ref s) => write!(f, "Comment({})", s),
        }
    }
}

#[derive(Debug)]
struct TokenLoc {
    token: Token,
    line: usize,
    column: usize
}

struct Lox {
    had_error: bool
}

struct Scanner<'a> {
    source: String,
    chars: std::iter::Peekable<std::str::Chars<'a>>,
    tokens: Vec<TokenLoc>,
    position: usize,
    line: usize,
    column: usize,
}

impl<'a> Scanner<'a> {
    fn new(source: &'a str) -> Self {
        Scanner {
            source: source.to_string(), // copy this thing because ... ?
            chars: source.chars().peekable(),
            tokens: vec![],
            position: 0,
            line: 1,
            column: 0,
        }
    }

    fn scan_tokens(mut self) -> Vec<TokenLoc> {
        while !self.is_at_end() {
            self.scan_token();
        }

        self.tokens.push(TokenLoc { token: Token::EOF, line: 0, column: 0 });
        return self.tokens
    }

    fn is_at_end(&self) -> bool {
        //println!("pos: {}, len: {}", self.position, self.source.len());
        return self.position >= self.source.len()
    }

    fn scan_token(&mut self) {
        // eat all whitespace first
        while let Some(&c) = self.chars.peek() {
            if !c.is_whitespace() {
                break;
            }

            if c == '\n' {
                self.line += 1;
                self.column = 1;
            }

            self.advance();
        }

        let token = match self.advance() {
            '(' => Token::LEFT_PAREN,
            ')' => Token::RIGHT_PAREN,
            '{' => Token::LEFT_BRACE,
            '}' => Token::RIGHT_BRACE,
            ',' => Token::COMMA,
            '.' => Token::DOT,
            '-' => Token::MINUS,
            '+' => Token::PLUS,
            ';' => Token::SEMICOLON,
            '*' => Token::STAR,
            '!' => if self.next_is('=') { self.advance(); Token::BANG_EQ } else { Token::BANG},
            '=' => if self.next_is('=') { self.advance(); Token::EQ_EQ } else { Token::EQ },
            '<' => if self.next_is('=') { self.advance(); Token::LS_EQ } else { Token::LS},
            '>' => if self.next_is('=') { self.advance(); Token::GT_EQ } else { Token::GT},
            '/' => {
                if self.next_is('/') { // comment!
                    while self.chars.peek() != Some(&'\n') && !self.is_at_end() {
                        self.advance();
                    }

                    Token::Comment("i did not capture the comment :3".to_string())
                } else {
                    Token::SLASH
                }
            },
            '"' => self.string(),
            c if c.is_numeric() => self.number(c),
            c if c.is_alphanumeric() => self.identifier_or_keyword(c),
            c => Token::Error(format!("Uknown token {}", c)),
        };

        self.add_token(token)
    }

    fn string(&mut self) -> Token {
        let mut acc = String::new();
        while let Some(&c) = self.chars.peek() {
            if c == '"' {
                self.advance();
                break;
            }

            if self.is_at_end() {
                return Token::Error("Unterminated string".to_string())
            }

            acc.push(self.advance());
        }

        return Token::String(acc)
    }

    fn number(&mut self, first: char) -> Token {
        let mut acc = String::new();
        acc.push(first);

        while let Some(&c) = self.chars.peek() {
            println!("{}", c);
            if !c.is_numeric() && c != '.' {
                break;
            }

            acc.push(self.advance());
        }

        Token::Number(acc.parse::<f64>().unwrap())
    }

    fn identifier_or_keyword(&mut self, first: char) -> Token {
        let token = self.identifier(first);
        if let Token::Identifier(s) = token {
            return match s.to_lowercase().as_str() {
                "and" => Token::AND,
                "class" => Token::CLASS,
                "else" => Token::ELSE,
                "false" => Token::FALSE,
                "fun" => Token::FUN,
                "for" => Token::FOR,
                "if" => Token::IF,
                "nil" => Token::NIL,
                "or" => Token::OR,
                "print" => Token::PRINT,
                "return" => Token::RETURN,
                "super" => Token::SUPER,
                "this" => Token::THIS,
                "true" => Token::TRUE,
                "var" => Token::VAR,
                "while" => Token::WHILE,
                _ => Token::Identifier(s)
            }
        } else {
            return Token::Error(format!("expected to have parsed an identifer, but got a different token variant: {:?}", token));
        }

    }

    fn identifier(&mut self, first: char) -> Token {
        let mut acc = String::new();
        acc.push(first);

        while let Some(&c) = self.chars.peek() {
            if !c.is_alphanumeric() {
                break;
            }

            acc.push(self.advance());
        }

        Token::Identifier(acc)
    }

    fn advance(&mut self) -> char {
        self.position += 1;
        self.column += 1;
        return self.chars.next().unwrap()
    }

    fn add_token(&mut self, token: Token) {
        //println!("{:?}", token);
        self.tokens.push(TokenLoc {
            token: token,
            line : self.line,
            column: self.column,
        })
    }

    fn next_is(&mut self, expected: char) -> bool {
        if self.chars.peek() != Some(&expected) {
            return false;
        }

        self.position += 1;
        return true;
    }


}

impl Lox {
    fn error(line: i32, message: &str) {
        Lox::report(line, &"", message)
    }

    fn report(line: i32, loc: &str, msg: &str) {
        println!("[line {}] Error {}: {}", line, loc, msg)
    }

    fn run(&mut self, source: String) { 
        let scanner = Scanner::new(&source);
        let tokens = scanner.scan_tokens();

        let mut parser = Parser::new(tokens);
        let stmts = parser.parse();

        match stmts {
            Ok(stmts) => { 

                let mut printer = AstPrinter {};
                printer.print(&stmts);

                let mut interpreter = Interpreter {};
                interpreter.interpret(stmts)
                //println!("{:?}", stmts.visit(&mut interpreter));
                
            },
            Err(s) => { print!("Error while parsing: {}", s)}
        }
    }
}

fn main() {
    let mut lox = Lox { had_error: false };
    lox.run("var a = 1 + 1; print \"Hello Yvi\";".to_string());    
}
